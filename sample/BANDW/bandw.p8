pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- „Éè„Åæ„Åæ„ÉíÀá„Åæ„Éè„Å™„ÅÇ„Éï„ÇÜ„Åü
board_width = 6
board_height = 6
cell_size = 16
board_x_offset = 8  -- „Éè„Åª„Åô„Éõüê±‚åÇ„ÉïÀá‚ñ•„Éï„Åü„ÇÄ„Éõ‚àß‚ßó„Éé„ÇÑ„Çà„Éí„Åì‚¨ÖÔ∏è„Éï„ÅÑ„Åï„Éè„Å≠‚úΩ„Éé„Åæ„Å®
board_y_offset = 8

-- „Éè„ÅÑ„Åä„Éè‚Ä¶‚òâ„Éè„Å™„ÅÇ„Éï„ÇÜ„Åü
turn_black = 1
turn_white = 2
turn_none = 3

-- „Éè‚òâ„Åà„Éè„Åõ‚¨ÖÔ∏è„Éò„Å™‚åÇ„ÉíÀá„Åæ„Éè„Å™„ÅÇ„Éï„ÇÜ„Åü
turn = turn_black
cursor_x = 3
cursor_y = 3
board = {}
is_player = {true, false}  -- „Éõ„ÇÅ‚û°Ô∏è„ÉòÏõÉ„ÅÆ„Éí‚ñ§„Å´„ÉïüÖæÔ∏è„Åü„Éè„Å™„Å∏„É§„ÇÇüòê„Éï‚ñ•„ÇÑ„ÉòÏõÉ„ÅÆ„Éí‚ñ§„Å´ ai

-- „Éè„Å™„ÅÇ„Éï„ÇÜ„Åü„Éí‚àß„Åø„Éè‚Ä¶‚û°Ô∏è„Éè‚Ä¶‚û°Ô∏è„Éõ‚ô•‚óÜ
directions = {
    {x = 0, y = -1},   -- up
    {x = -1, y = -1},  -- up_left
    {x = -1, y = 0},   -- left
    {x = -1, y = 1},   -- down_left
    {x = 0, y = 1},    -- down
    {x = 1, y = 1},    -- down_right
    {x = 1, y = 0},    -- right
    {x = 1, y = -1}    -- up_right
}

-- „Éè‚òâ„Åà„Éè„Åõ‚¨ÖÔ∏è„Éèüòê‚àß„Éí„Åì‚¨ÖÔ∏è„Éï„ÅÑ„Åï
function init_board()
    for y = 1, board_height do
        board[y] = {}
        for x = 1, board_width do
            board[y][x] = turn_none
        end
    end
    -- „Éò„Åù„Å®„Éï„ÇÑ„Å™„Éè‚òâ„Åà„Éè„Åõ‚¨ÖÔ∏è„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶„Éé„ÇÑ‚ô™„Éï„ÇÑ„Å™
    board[3][3], board[4][4] = turn_white, turn_white
    board[3][4], board[4][3] = turn_black, turn_black
end

-- „Éï„Åø„Å°„Éò„Åì„ÇÑ„Éí„Åì‚¨ÖÔ∏è„Éï„ÅÑ„Åï
function draw_board()
    cls()

    -- „Éï„Åø„Å°„Éò„Åì„ÇÑ„Éí„Åì‚¨ÖÔ∏è„Éï„ÅÑ„Åï„Éí„Åç„ÇÇ„É§„ÇÇüòê„Éè‚óÜ„ÅØ„Éõüê±‚åÇ„Éè‚òÖüòê„Éé„Åæ‚¨ÖÔ∏è„Éõüê±‚åÇ„Éï„Åª„ÅÇ„Éè„ÅÜ„Åù„Éï„Å´‚ñë„Éè„ÅÜ‚ô™„Éè‚úΩ„Åõ
    for y = 0, board_height do
        line(board_x_offset, board_y_offset + y * cell_size, board_x_offset + board_width * cell_size - 1, board_y_offset + y * cell_size, 5)
    end
    for x = 0, board_width do
        line(board_x_offset + x * cell_size, board_y_offset, board_x_offset + x * cell_size, board_y_offset + board_height * cell_size - 1, 5)
    end

    -- „Éï„Åø„Å°„Éò„Åì„ÇÑ„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶
    for y = 1, board_height do
        for x = 1, board_width do
            local cell = board[y][x]
            if cell == turn_black then
                spr(1, board_x_offset + (x - 1) * cell_size + 4, board_y_offset + (y - 1) * cell_size + 4)  -- „Éè„Å¨‚ô•„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶„Éí‚¨ÜÔ∏è„ÇÜ„Éè„ÅÜ„Åù„Éí„Åç„ÇÇ„Éè„Å®‚Ä¶„Éé„Åæ„Å®„Éè„Åï„Å™
            elseif cell == turn_white then
                spr(2, board_x_offset + (x - 1) * cell_size + 4, board_y_offset + (y - 1) * cell_size + 4)  -- „Éè„Å¨‚ô•„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶„Éí‚¨ÜÔ∏è„ÇÜ„Éè„ÅÜ„Åù„Éí„Åç„ÇÇ„Éè„Å®‚Ä¶„Éé„Åæ„Å®„Éè„Åï„Å™
            end
        end
    end

    -- „ÉïÀá„Å§„Éè‚úΩÏõÉ„Éí„Åù‚ñ•
    rect(board_x_offset + (cursor_x - 1) * cell_size, board_y_offset + (cursor_y - 1) * cell_size,
         board_x_offset + cursor_x * cell_size - 1, board_y_offset + cursor_y * cell_size - 1, 8)
end

-- „Éò„Åù‚òâ„Éï„Å™‚ùé„Éí‚àß„Åø„Éè‚Ä¶‚û°Ô∏è„Éé„ÇÑ‚ô™„Éï„ÇÑ„Å™
function vec_add(v0, v1)
    return {x = v0.x + v1.x, y = v0.y + v1.y}
end

-- „Éè‚òâ„Åï„Éí‚àß„Åª„Éò‚¨áÔ∏è„ÇÑ„Éè‚Ä¶„Åô„Éí‚¨ÜÔ∏è„ÇÜ„Éï„ÇÑ„Å™„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶
function can_place(color, pos, turn_over)
    local opponent = color == turn_black and turn_white or turn_black
    local can_place = false
    if board[pos.y][pos.x] ~= turn_none then return false end

    for i, dir in pairs(directions) do
        local cur = vec_add(pos, dir)
        if board[cur.y] and board[cur.y][cur.x] == opponent then
            while true do
                cur = vec_add(cur, dir)
                if not board[cur.y] or not board[cur.y][cur.x] then break end
                if board[cur.y][cur.x] == turn_none then break end
                if board[cur.y][cur.x] == color then
                    can_place = true
                    if turn_over then
                        local rev = vec_add(pos, dir)
                        while board[rev.y][rev.x] == opponent do
                            board[rev.y][rev.x] = color
                            rev = vec_add(rev, dir)
                        end
                    end
                    break
                end
            end
        end
    end
    return can_place
end

-- „Éí„Å°„Åë„Éí„Åã„Åó„Éí„Åì‚¨ÖÔ∏è„Éï„ÅÑ„Åï„Éí‚ñ§„Å´„Éè‚Ä¶„Åô„Éí„ÅÜÏõÉ„Éè‚óÜ„Å´„Éí‚¨ÜÔ∏è„ÇÜ„Éï„ÇÑ„Å™„Éé„ÇÑ‚ô™„Éï„ÇÑ„Å™
function can_place_all(color)
    for y = 1, board_height do
        for x = 1, board_width do
            if can_place(color, {x = x, y = y}) then
                return true
            end
        end
    end
    return false
end

-- „Éò„Åù‚òâ„Éï„Å™‚ùé„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶„ÉíÀá„Åæ„Éõ‚ô•‚óÜ
function count_disks(color)
    local count = 0
    for y = 1, board_height do
        for x = 1, board_width do
            if board[y][x] == color then
                count += 1
            end
        end
    end
    return count
end

-- „Éè‚òâ‚ô•„Éí‚óÜ„ÅÑ„Éè„ÅÑ„Åä„Éè‚Ä¶‚òâ
function switch_turn()
    turn = turn == turn_black and turn_white or turn_black
end

-- „Éõ„Åè„Å´„Éï„Åï„ÇÄ„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶„ÉíÀá„Åæ„Éõ‚ô•‚óÜ„Éò‚òâ‚ô•„Éè‚¨ÖÔ∏è„Åà„Éè‚òâ„Åü„Éò‚ñà‚úΩ
function display_info()
    local black_count = count_disks(turn_black)
    local white_count = count_disks(turn_white)

    -- „Éè„ÅÜ„Åù„Éè‚óÜ„ÅØ„Éè‚ñí„Å≤„Éõ„Åè„Å´„Éï„Åï„ÇÄ„Éí„Åì‚¨ÖÔ∏è„Éè„Å®‚Ä¶„ÉíÀá„Åæ„Éõ‚ô•‚óÜ
    print("black: " .. black_count, 10,110, 7)
    print("white: " .. white_count,	65, 110, 7)

    -- „Éè‚òâ„Åï„Éí‚àß„Åª„Éõ‚ñí‚åÇ„Éí‚òâ„ÅÆ„Éï„Åµ‚Ä¶„Éí„Åà„Åã„Éé„Åæ„Åô„Éõ„Åè„Å´„Éï„Åï„ÇÄ„Éï‚ô™„ÅÆ„Éè‚¨ÖÔ∏è„Åà„Éò‚ñà‚úΩ
    if turn == turn_none then
        local winner_text
        if black_count > white_count then
            winner_text = "player wins!"
        elseif white_count > black_count then
            winner_text = "ai wins!"
        else
            winner_text = "it's a draw!"
        end
        print(winner_text, 44, 55, 8)  -- „Éè„ÅÜ„Åù„Éè‚óÜ„ÅØ„Éè‚ñí„Å≤„Éõ„Åè„Å´„Éï„Åï„ÇÄ„Éï‚ô™„ÅÆ„Éè‚¨ÖÔ∏è„Åà„Éï„Åµ‚Ä¶„Éí„Åä„ÅÜ
    end
end

-- „ÉïüÖæÔ∏è„Åü„Éè„Å™„Å∏„Éí‚òâ‚àß ai „Éï„ÅÇ‚ñë„Éò„ÇÇ„Åæ„Éè‚úΩ„Åó„Éò‚ñ•Àá„Éï‚Ä¶‚óè
function player_move()
    if btnp(2) then cursor_y = (cursor_y - 2) % board_height + 1 end
    if btnp(3) then cursor_y = cursor_y % board_height + 1 end
    if btnp(0) then cursor_x = (cursor_x - 2) % board_width + 1 end
    if btnp(1) then cursor_x = cursor_x % board_width + 1 end

    if btnp(4) and can_place(turn, {x = cursor_x, y = cursor_y}, true) then
        board[cursor_y][cursor_x] = turn
        switch_turn()
    end
end

function ai_move()
    local possible_moves = {}
    for y = 1, board_height do
        for x = 1, board_width do
            if can_place(turn, {x = x, y = y}) then
                add(possible_moves, {x = x, y = y})
            end
        end
    end
    if #possible_moves > 0 then
        local move = possible_moves[flr(rnd(#possible_moves)) + 1]
        can_place(turn, move, true)
        board[move.y][move.x] = turn
        switch_turn()
    end
end

function _update()
    if turn == turn_none then return end

    if not can_place_all(turn) then
        switch_turn()
        if not can_place_all(turn) then
            turn = turn_none -- „Éï„Åµüê±„Éè„Å≠‚ñà„Éè‚òâ„Åï„Éè„Å™„ÅÇ
        end
    else
        if is_player[turn] then
            player_move()
        else
            ai_move()
        end
    end
end

function _draw()
    draw_board()
    display_info()
    rect(8,107,104,117,7)
    rect(107,8,127,117,7)
end

init_board()

__gfx__
00000000005555000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055555500777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700555555557777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000555555557777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000555555557777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700555555557777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055555500777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000005555000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
